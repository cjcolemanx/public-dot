# Use this to find key names
# xev | awk -F'[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }'

###########################
###      ~ SXHKD ~      ###
###########################

### Terminals
super + {_, alt} + Return 
	{kitty, alacritty}
# super + Return 
# 	kitty

###########################
###   ~ Super Space ~
###
### Rofi and Applications
###########################

# TODO: calculator
#super + space ; super + c
#  rofi -show calc -combi calc -no-show-match -no-sort

### Quick Open
super + space; super + {w}
  {brave}
super + {_, shift + } b
	{qutebrowser, brave}

super + o
  bash ~/.config/polybar/grayblocks/scripts/launcher.sh &

alt + tab
  rofi -show combi -combi-modi "window"

### Rofi Launchers
super + space; super + {m}
  bash  { ~/.config/rofi/applets/bin/mpd.sh &}
super + space; super + {v}
  bash  { ~/.config/rofi/applets/bin/volume.sh &}
super + space; super + {s}
  bash  { ~/.config/rofi/applets/bin/screenshot.sh &}
super + space; super + {l}
  bash  { ~/.config/rofi/applets/bin/quicklinks.sh &}
super + space; super + {f}
  bash  {~/.config/rofi/scripts/my-scripts/ranger.sh &}
super + space; super + {y}
  bash  {~/.config/rofi/scripts/my-scripts/shell_scripts.sh &}
super + space; super + {t}
  bash  {~/.config/rofi/scripts/my-scripts/tmux.sh &}
super + space; super + {r}
  bash  {~/.config/rofi/scripts/my-scripts/master_restarter.sh &}

# ...And one when you forget the binds : )
super + space; super + {slash}
  bash  {~/.config/rofi/scripts/my-scripts/keys_please.sh &}

### Other Apps/Things

# super + `
super + grave 
	/home/charles/.config/sxhkd/scripts/scratchpad.sh

#TODO:
### Run
# super + r
# 	bash {~/.config/rofi/scripts/my-scripts/}

# FIXME:
# super + space; super + {f}
#   bash  {~/.config/rofi/scripts/my-scripts/finders.sh &}

#############################
###   ~ Alt ~
###
### Notifications and Other
#############################

### Dunst
# Hide All Notifications
alt + backslash
  dunstctl close-all

# Display Notifications
alt + shift + backslash
  dunstctl history-pop

# Close Latest Notification
alt + BackSpace
  dunstctl close

##########################
###   ~ Super Control ~
###
### Media
##########################

### Screenshots
# Desktop
super + ctrl + p
	flameshot screen --clipboard --path /mnt/A/pictures/screenshots

# All Desktops
super + ctrl + shift + p
	flameshot full --clipboard --path /mnt/A/pictures/screenshots

# Snipping
super + ctrl + s
	flameshot gui --clipboard --path /mnt/A/pictures/screenshots

### Audio
# Volume
# super + ctrl + {j,k}
alt + ctrl + {j,k}
  mpc volume {-7,+7}

# Incremental Seeking
# super + ctrl + {comma,period}
alt + ctrl + {comma,period}
  mpc seekthrough {-00:00:05,+00:00:05}

# Track Switching
# super + ctrl + {h,l}
alt + ctrl + {h,l}
  mpc {prev,next}

# Play/Pause/Stop
# super + ctrl + space
alt + ctrl + space
  mpc toggle
# super + ctrl + BackSpace
alt + ctrl + BackSpace
  mpc stop
# super + ctrl + Return
alt + ctrl + Return
  mpc play

# super + space; super + {c}
alt + {c}
  clipmenu 

# Windows-like Behavior
# FIXME: dumb rofi - no combi enabled.
alt + Tab
	rofi -show combi -combi-modes "window"

# Lil' GUI
# NOTE: Depends on https://github/GuradKenzie/miniplayer
# super + ctrl + m
alt + shift + m
	/home/charles/.config/sxhkd/scripts/miniplayer.sh

### Output Routing
# ALSA stuff is too hard, so I use this GUI
# super + ctrl + equal
alt + equal
	pavucontrol --class pavucontrol

### Headset Controls
XF86AudioLowerVolume
	amixer -Mq set Master,0 1%- unmute & notify-send "Volume (-)"

XF86AudioRaiseVolume
	amixer -Mq set Master,0 1%+ unmute & notify-send "Volume (+)"

##############################
###   ~ Super Alternative ~
###
### Window Management
##############################

### Basic
# Focus/Swap Node In Direction
super + {_,shift + }{h,j,k,l}
  bspc node -{f,s} {west,south,north,east} {,--follow}

# Focus Next/Prev Node (Cycles EVERY window)
super + {_,shift + } n
  bspc node -f {next,prev}

# Focus Next/Prev Node (Only This Workspace)
# super + bracket{left,right}
super + {u,i}
  bspc node -f {prev,next}.local

# super + {_, shift + } Tab
#   bspc desktop -f {prev,next}.local

# Switch Desktop
# super + {BackSpace, backslash}
#   bspc desktop -f {prev,next}.local

super + BackSpace
  bspc desktop -f prev.local

# NOTE: MAJOR: this is technically equivalent to super + backslash!
super + shift + Tab
	bspc desktop -f next.local

super + t; super + {h, l} 
  bspc desktop -f {prev,next}.local

# Cycle tiled and monocle
super + m
  bspc desktop -l next

# close window
super + q
  bspc node -c

# Change Window Type
super + {t,shift + t}
	bspc node -t {tiled,pseudo_tiled}

super + f
	bspc node -t floating

# "Minimize" window
# super + period
super + slash
	bspc node -g hidden && bash ~/.config/sxhkd/scripts/append_hidden_window_to_file.sh

# unhide first unhidden in stack
super + y
	bspc node $(bspc query -N -n .hidden | tail -n1) -g hidden=off

# "Maximize" window
super + comma
	bspc node -t fullscreen

# "Hide" window
# super + comma
# 	bspc node -g private

# "IDK" window
super + apostrophe
	bspc node -g activate

super + v
	bspc node -g sticky



# Focus other monitor
# super + f; super + {h,l}
super + semicolon
  bspc monitor -f next
  # bspc monitor -f {prev, next}

### Re-Ordering and Sending
# Send to desktop
super + {_, shift +} {1-9,0}
  bspc {desktop  -f, node -d} '^{1-9,10}' 

# Swap Smallest and Biggest Nodes
super + {g, shift + g}
	bspc node -s {biggest, smallest}.local

# Rotate Desktop
super + c; super + {h,l}
	bspc node @/ -R {270, 90}

# Rotate Nodes
super + c; super + {j,k}
	bspc node @/ -C {forward, backward}

# [s]end to monitor
super + s ; super + {l,h}
  bspc node -m {next,prev} --follow

### Resizing and Non-Tree Movement

# Not root
super + bracket{left,right}
  bspc node -z left {-20, 20} 0

super + alt + bracket{left,right}
  bspc node -z left {-60, 60} 0

# Root
super + ctrl + bracket{left,right}
  bspc node -z right {-20, 20} 0

super + ctrl + alt + bracket{left,right}
  bspc node -z right {-60, 60} 0

# Not Bottom
super + {minus,equal}
  bspc node -z bottom 0 {-20, 20}

super + alt + {minus,equal}
  bspc node -z bottom 0 {-60, 60}

# Bottom
super + ctrl + {minus,equal}
  bspc node -z top 0 {-20, 20}

super + ctrl + alt + {minus,equal}
  bspc node -z top 0 {-60, 60}

#### Floating Windows

# Move Floating Window
super + ctrl + {h,j,k,l}
	bspc node focused -v {-40 0, 0 40, 0 -40, 40 0}

# Move Floating Window Faster
super + ctrl + alt + {h,j,k,l}
	bspc node focused -v {-120 0, 0 120, 0 -120, 120 0}



### Receptacles
# NOTE: MAJOR WIP - receptacles are difficult to manage, and the bspc syntax isn't helping
# Insert Receptacle
# super + i; super + r; super + {h,j,k,l}
# 	bspc node -i {west,south,north,east}

# Move Focused into Receptacle
# super + i; super + m; super + {h,j,k,l}
# 	bash ~/.config/bspwm/scripts/move-to-receptacle.sh

# FIXME:
# Kill Receptacle in direction
# super + i; super + q; super + {h,j,k,l}
# 	bspc node -k {west,south,north,east}.leaf.\!window

######
## Text Editing
######

# NOTE: debugging 
# control + alt + super + l
# echo "Class: " > /tmp/window_details; \
# prop -id "$(xdotool getwindowfocus)" WM_CLASS | cut -d '"' -f 2 >> /tmp/window_details; \
# cho "\nname: " >> /tmp/window_details; \
# xprop -id "$(xdotool getwindowfocus)" WM_NAME | cut -d '"' -f 2 >> /tmp/window_details

# control + BackSpace
# 	run_if_window_matches --name "NVIM" \
# 	xte "keyup BackSpace" "keyup Control_L" "key Delete" "keydown Control_L" 
# run_if_window_matches --class "(zsh)" \
# xte "keyup BackSpace" "keyup Control_L" "key Delete" "keydown Control_L" 

# FIXME:
alt + h
	xte "keyup Meta_L" "keyup Left" "key Home" "keydown Meta_L" "keyup Meta_L" "keydown Meta_L"

### Alt+Tab behavior
# alt + tab
# 	rofi -show window
